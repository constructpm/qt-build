---
name: CI

# A note on WebEngine:
#
# WebEngine takes too long to compile on the actions runners, so we don't
# include it in this build. To include it in the future
#
# - Add a step to checkout the WebEngine submodules
# - Remove -skip qtwebengine
# - Allocate a larger builder!
#
# Otherwise, the dependencies should already have been installed.
#
# Also note the licencing of QtWebEngine may not be compatible with the LGPL
# licence (the Qt website reports it isn't, although this 5.15.8 includes an
# LGPL licence).

env:
  # The version of QT that should get built
  # This will need to match the tags used in the qt/qt5 repo minus the "v"
  # For example this version will use source from qt/qt5 tag "v6.7.1"
  qt_version: "6.7.1"

on:
  pull_request:
    branches: [main]
    # Note: This ignores if the pull request as a whole only touches MD files.
    # If ANY commit in the PR touches something else then every push will trigger this workflow.
    paths-ignore:
      - '**/*.md'
  push:
    tags:
      - v*

jobs:
  tar-src:
    name: "Tar qt source"
    runs-on: ubuntu-latest
    steps:
      - id: config
        run: echo "artefact_name=qt-${{ env.qt_version }}-src.tar.gz" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: v${{ env.qt_version }}
          submodules: true
          path: qt-src
      - name: Archive
        run: tar --create --xz --file "${{ steps.config.outputs.artefact_name }}" --exclude-vcs qt-src
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.config.outputs.artefact_name }}"
          path: "${{ github.workspace }}/${{ steps.config.outputs.artefact_name }}"

  build:
    name: "Build ${{ matrix.config.os }}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: "ubuntu-22.04"
            std: "17"

    steps:
      - id: config
        run: |
          artefact_name="qt-${{ env.qt_version }}-cpp${{ matrix.config.std }}-${{ matrix.config.os }}-x64.tar.gz"
          echo "artefact_name=$artefact_name" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          # Actions runners include some awful PPAs!
          ls /etc/apt/sources.list.d/
          sudo sudo add-apt-repository --remove ppa:ondrej/php
          sudo apt-get purge -y libicu-dev
          sudo apt-get update
          sudo apt-get install -y \
            bison \
            flex \
            gperf \
            libbz2-dev \
            libcups2-dev \
            libdbus-1-dev \
            libdrm-dev \
            libegl1-mesa-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libglu1-mesa-dev \
            libicu-dev \
            libjpeg-dev \
            libnss3-dev \
            libpng-dev \
            libpq-dev \
            libssl-dev \
            libudev-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-glx0-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-shape0-dev \
            libxcb-shm0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            libxcb1-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxrandr-dev \
            libxrender-dev \
            libxslt-dev \
            libxss-dev \
            libxtst-dev \
      - uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: v${{ env.qt_version }}
          submodules: true
      - name: Configure
        run: |
          ./configure \
            -prefix "${{ github.workspace }}/opt/qt5" \
            -opensource -confirm-license \
            -c++std c++${{ matrix.config.std }} \
            -shared \
            -plugin-sql-psql \
            -system-zlib \
            -system-libpng \
            -system-libjpeg \
            -system-freetype \
            -openssl-linked \
            -system-pcre \
            -make libs \
            -nomake tools \
            -nomake examples \
            -gui \
            -widgets \
            -cups \
            -strip \
            -no-tiff \
            -skip qt3d \
            -skip qtactiveqt \
            -skip qtcharts \
            -skip qtdatavis3d \
            -skip qtdoc \
            -skip qtdocgallery \
            -skip qtgraphs \
            -skip qtlottie \
            -skip qtmultimedia \
            -skip qtnetworkauth \
            -skip qtqa \
            -skip qtquick3d \
            -skip qtquicktimeline \
            -skip qtvirtualkeyboard \
            -skip qtwayland \
            -skip qtwebengine \
            -skip qtwebglplugin \
      - name: Build
        run: |
          make -j 2
          make install
      - name: Archive
        working-directory: ${{ github.workspace }}/opt
        run: tar cJfv "${{ steps.config.outputs.artefact_name }}" qt5
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.config.outputs.artefact_name }}"
          path: "${{ github.workspace }}/opt/${{ steps.config.outputs.artefact_name }}"

  release:
    if: contains(github.ref, 'tags/v')

    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - tar-src
      - build

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload:
    if: contains(github.ref, 'tags/v')

    name: "Upload ${{ matrix.config.artefact }} to release"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - artefact: src
          - artefact: cpp17-ubuntu-22.04-x64
    needs: release

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        env:
          artefact_name: qt-${{ env.qt_version }}-${{ matrix.config.artefact }}.tar.gz 
        with:
          name: "${{ env.artefact_name }}"
          path: ./
      - name: Upload to Release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          artefact_name: qt-${{ env.qt_version }}-${{ matrix.config.artefact }}.tar.gz 
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: "./${{ env.artefact_name }}"
          asset_name: "${{ env.artefact_name }}"
          asset_content_type: application/x-gtar


